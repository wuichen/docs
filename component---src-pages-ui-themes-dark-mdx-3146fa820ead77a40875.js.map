{"version":3,"sources":["webpack:///./src/pages/ui/themes/dark.mdx","webpack:///./src/components/ThemeTable/index.tsx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","title","theme","isMDXComponent","ThemeTable","useState","search","setSearch","style","textTransform","fullWidth","placeholder","type","value","onChange","e","target","className","getTheme","map","v","key","includes","id","to","dangerouslySetInnerHTML","__html","toString","replace","default","parent","getParent"],"mappings":"wSAQO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,YAAC,IAAD,CAAKC,MAAM,gBAAgBD,QAAQ,QACnC,YAAC,IAAD,CAAYE,MAAM,OAAOF,QAAQ,gBAKrCH,EAAWM,gBAAiB,G,+JCiCbC,IA3D+C,SAACL,GAAU,MAC3CM,mBAAS,IAA9BC,EADgE,KACxDC,EADwD,KAsBvE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,wBAAIC,MAAO,CAAEC,cAAe,cAAgBV,EAAMG,OACjC,YAAhBH,EAAMG,OAAuB,2DAC9B,kBAAC,IAAD,CAAYQ,WAAS,GACnB,2BAAOC,YAAY,aAAaC,KAAK,OAAOC,MAAOP,EAAQQ,SAAU,SAACC,GAAD,OAAOR,EAAUQ,EAAEC,OAAOH,WAEjG,kBAAC,IAAD,CAAOI,UAAU,WACf,+BACE,4BACE,oCACA,qCACA,wCAGJ,+BACGC,YAASnB,EAAMG,OAAOiB,KAAI,SAACC,GAC1B,GAAIA,EAAEC,IAAIC,SAAShB,GACjB,OACE,wBAAIe,IAAKD,EAAEC,IAAKE,GAAIH,EAAEC,KACpB,4BACE,kBAAC,OAAD,CAAMG,GAAE,WAAazB,EAAMG,MAAnB,IAA4BkB,EAAEC,KAAQD,EAAEC,MAElD,wBAAII,wBAAyB,CAAEC,QA3C/Bb,EA2CgDO,EAAEP,OA1ClEA,EAAQA,EACLc,WACAC,QAAQ,6BAA8B,0DAC5BA,QAAQ,KAAM,UAwCX,4BArCA,SAACR,GACjB,OAAIA,EAAES,SAAWT,EAAEU,OACV,kBAAC,OAAD,CAAMN,GAAE,mBAAqBJ,EAAEU,QAAWV,EAAEU,OAA5C,cACEV,EAAES,QACJ,kBAAC,OAAD,CAAML,GAAE,mBAAqBJ,EAAEC,KAAQD,EAAEC,IAAzC,cACED,EAAEU,OACJ,kBAAC,OAAD,CAAMN,GAAE,WAAazB,EAAMG,MAAnB,IAA4BkB,EAAEU,QAAWV,EAAEU,QAEnD,GA6BYC,CAAUX,KA5ChB,IAACP","file":"component---src-pages-ui-themes-dark-mdx-3146fa820ead77a40875.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/ahmed/Sites/docs/src/components/MdxLayout.tsx\";\nimport ThemeTable from 'src/components/ThemeTable';\nimport SEO from 'src/components/SEO';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <SEO title=\"Default Theme\" mdxType=\"SEO\" />\n    <ThemeTable theme=\"dark\" mdxType=\"ThemeTable\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React, { useState } from 'react';\nimport { DefaultTheme } from 'styled-components';\nimport { Card, CardBody, InputGroup } from '@paljs/ui';\nimport { Link } from 'gatsby';\nimport Table from '../Table';\nimport { getTheme, ReturnThemeData } from './themeData';\n\nconst ThemeTable: React.FC<{ theme: DefaultTheme['name'] }> = (props) => {\n  const [search, setSearch] = useState('');\n\n  const getColor = (value: string) => {\n    value = value\n      .toString()\n      .replace(/(#[a-f0-9]{6}|rgba.*?\\))/gi, '$&<span class=\"color-swatch\" style=\"background: $&\"/>');\n    return value.replace(/,/g, ', ');\n  };\n\n  const getParent = (v: ReturnThemeData) => {\n    if (v.default && v.parent) {\n      return <Link to={`/themes/default#${v.parent}`}>{v.parent} (default)</Link>;\n    } else if (v.default) {\n      return <Link to={`/themes/default#${v.key}`}>{v.key} (default)</Link>;\n    } else if (v.parent) {\n      return <Link to={`/themes/${props.theme}#${v.parent}`}>{v.parent}</Link>;\n    } else {\n      return '';\n    }\n  };\n\n  return (\n    <Card>\n      <CardBody>\n        <h2 style={{ textTransform: 'uppercase' }}>{props.theme}</h2>\n        {props.theme !== 'default' && <p>inherited from default theme</p>}\n        <InputGroup fullWidth>\n          <input placeholder=\"search for\" type=\"text\" value={search} onChange={(e) => setSearch(e.target.value)} />\n        </InputGroup>\n        <Table className=\"striped\">\n          <thead>\n            <tr>\n              <td>Name</td>\n              <td>Value</td>\n              <td>Parent</td>\n            </tr>\n          </thead>\n          <tbody>\n            {getTheme(props.theme).map((v) => {\n              if (v.key.includes(search)) {\n                return (\n                  <tr key={v.key} id={v.key}>\n                    <td>\n                      <Link to={`/themes/${props.theme}#${v.key}`}>{v.key}</Link>\n                    </td>\n                    <td dangerouslySetInnerHTML={{ __html: getColor(v.value as string) }} />\n                    <td>{getParent(v)}</td>\n                  </tr>\n                );\n              }\n            })}\n          </tbody>\n        </Table>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default ThemeTable;\n"],"sourceRoot":""}